<!DOCTYPE pxml>
<pxml namespace="ParsePxml">
    
    <tokens namespace="Tokens" sourceFile="PxmlToken.cpp" headerFile="PxmlToken.hpp">
        
        <header position="top" indent=0>
            #include <string>
        </header>
        
        <token name="Doctype"></token>
        <token name="Equal"></token>
        <token name="Close"></token>
        <token name="Inline"></token>
        <token name="Bool">
            <type>bool</type>
        </token>
        <token name="Number">
            <type>double</type>
        </token>
        <token name="Tag">
            <type>std::string</type>
        </token>
        <token name="Tail">
            <type>std::string</type>
        </token>
        <token name="String">
            <type>std::string</type>
        </token>
        <token name="Text">
            <type>std::string</type>
        </token>
        <token name="ID">
            <type>std::string</type>
        </token>
        <token name="Entity">
            <type>std::string</type>
        </token>
        <token name="Space">
            <type>std::string</type>
        </token>
    </tokens>
    
    <lexer class="PxmlLexer" newLine="\n" sourceFile="PxmlLexer.cpp" headerFile="PxmlLexer.hpp">
        
        <rule pattern="<!DOCTYPE pxml>">
            return Token(Doctype(), _pos);
        </rule>
        
        <rule push="comment" pattern="\{%" id="Comment"></rule>
        <group name="comment">
            <use id="Comment"></use>
            <rule pattern="%\}" pop></rule>
            <rule pattern="\\."></rule>
            <rule pattern="."></rule>
        </group>
        
        <rule push="tail" more pattern="</\a\w*"></rule>
        <group name="tail">
            <use id="Comment"></use>
            <rule pattern=">" pop>
                return Token(Tail(_text.substr(2, _text.size() - 3)), _pos);
            </rule>
            <rule pattern="\s+"></rule>
        </group>
        
        <rule push="tag" pattern="<\a\w*">
            return Token(Tag(_text.substr(1)), _pos);
        </rule>
        <group name="tag">
            <use id="Comment"></use>
            <rule pattern="/\s*>" pop>
                return Token(Inline(), _pos);
            </rule>
            <rule pattern=">" pop>
                return Token(Close(), _pos);
            </rule>
            <rule pattern="\"" push="string"></rule>
            <rule pattern="=">
                return Token(Equal(), _pos);
            </rule>
            <rule pattern="(true|false)">
                return Token(Bool(_text == "true"), _pos);
            </rule>
            <rule pattern="[\a_][\w_]*">
                return Token(ID(_text), _pos);
            </rule>
            <rule pattern="[+\-]?[0-9]+(\.[0-9]*)?([eE][+\-]?[0-9]+)?">
                return Token(Number(std::stod(_text)), _pos);
            </rule>
            <rule pattern="\s+"></rule>
        </group>
        
        <group name="string">
            <rule pattern="(.|\\.)" more></rule>
            <rule pattern="\"" pop>
                return Token(String(_text.substr(0, _text.size() - 1)), _pos);
            </rule>
        </group>
        
        <rule pattern="&(amp|lt|gt|apos|quot);">
            return Token(Entity(_text), _pos);
        </rule>
        
        <rule pattern="\s+">
            return Token(Space(_text), _pos);
        </rule>
        
        <rule push="text" more pattern="\\<">
            text.erase(text.end() - 3);
        </rule>
        <rule push="text" more pattern="(.|\\<|\\.|\{)"></rule>
        <group name="text">
            <use id="Comment"></use>
            <rule pattern="\\<" more>
                text.erase(text.end() - 3);
            </rule>
            <rule pattern="(.|\\.|\{)" more></rule>
            <rule pattern="<" pop>
                text = "<" + text;
                state = states[state]['<'];
                return Token(Text(_text.substr(0, _text.size() - 1)), _pos);
            </rule>
        </group>
    </lexer>
    <parser class="PxmlParser" start="pxml" headerFile="PxmlParser.hpp" sourceFile="PxmlParser.cpp" return="PXML::Pxml">
        
        <header position="top" indent=0>
            #include <Pxml.hpp>
            #include <exception.hpp>
        </header>
        
        <source position="top" indent=0>
            static PXML::Position to_pos(ParsePxml::Position pos){
                return PXML::Position {.path = pos.path, .line = pos.line, .column = pos.column};
            }
        </source>
        
        <target type="PXML::Pxml" name="pxml">
            <grammar pattern="Doctype spaces element spaces">
                return _op2;
            </grammar>
        </target>
        <target type="std::list<PXML::Pxml::Child>" name="body">
            <grammar pattern="body element">
                _op0.emplace_back(to_pos(_pos[1]), _op1);
                return _op0;
            </grammar>
            <grammar pattern="body text">
                _op0.emplace_back(to_pos(_pos[1]), _op1);
                return _op0;
            </grammar>
            <grammar>
                return {};
            </grammar>
        </target>
        <target type="PXML::Pxml" name="element">
            <grammar pattern="Tag attributes Close body Tail">
                PXML::Position pos = to_pos(_pos[0]);
                if(_op0.value != _op4.value){
                    throw Exception::SyntaxError("tag not match", pos);
                }
                PXML::Pxml elem {.tag = _op0.value, .pos = pos};
                elem.swap(_op1);
                elem.children.swap(_op3);
                return elem;
            </grammar>
            <grammar pattern="Tag attributes Inline">
                PXML::Pxml elem {.tag = _op0.value, .pos = to_pos(_pos[0])};
                elem.swap(_op1);
                return elem;
            </grammar>
        </target>
        <target type="std::string" name="spaces">
            <grammar pattern="spaces Space">
                return _op0 + _op1.value;
            </grammar>
            <grammar>
                return std::string();
            </grammar>
        </target>
        <target type="std::string" name="text">
            <grammar pattern="text Text">
                return _op0 + _op1.value;
            </grammar>
            <grammar pattern="text Space">
                return _op0 + _op1.value;
            </grammar>
            <grammar pattern="text Entity">
                return _op0 + _op1.value;
            </grammar>
            <grammar>
                return std::string();
            </grammar>
        </target>
        <target type="std::unordered_map<std::string, PXML::Value>" name="attributes">
            <grammar pattern="attributes attribute">
                _op0.emplace(_op1);
                return _op0;
            </grammar>
            <grammar pattern="attributes Space">
                return _op0;
            </grammar>
            <grammar>
                return {};
            </grammar>
        </target>
        <target type="std::pair<std::string, PXML::Value>" name="attribute">
            <grammar pattern="ID Equal value">
                return {_op0.value, _op2};
            </grammar>
            <grammar pattern="ID">
                return {_op0.value, {to_pos(_pos[0]), std::monostate()}};
            </grammar>
        </target>
        <target type="PXML::Value" name="value">
            <grammar pattern="Bool">
                return {to_pos(_pos[0]), _op0.value};
            </grammar>
            <grammar pattern="Number">
                return {to_pos(_pos[0]), _op0.value};
            </grammar>
            <grammar pattern="String">
                return {to_pos(_pos[0]), _op0.value};
            </grammar>
        </target>
    </parser>
</pxml>