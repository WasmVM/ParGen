/** generated by ParGen **/
#ifndef ParGen_PxmlLexer_guard
#define ParGen_PxmlLexer_guard

#include <iostream>
#include <deque>
#include <filesystem>
#include <optional>
#include <map>
#include <exception>
#include <initializer_list>
#include "PxmlToken.hpp"

namespace PXML {

struct UnknownToken : public std::exception {
    UnknownToken(Position pos, std::string text): pos(pos), msg("unknown token '" + text + "'"){}
    Position pos, cur;
    std::string msg;
    const char* what();
};

struct PxmlLexer {
    PxmlLexer(std::filesystem::path filepath, std::istream& stream);
    Token get();
    Position pos, cur;
    std::string text = "";

    struct Chars {
        using char_t = std::istream::int_type;
        Chars(std::initializer_list<char_t> init);
        Chars(char_t init) : min(init), max(init){}
        bool operator<(const Chars&) const;
        char_t min, max;
    };

protected:
    using State = std::map<Chars, size_t>;
    static std::vector<State> states;
    std::deque<std::pair<size_t, std::string>> stack;
    std::istream::int_type current;
    size_t state;
    std::string new_line = "\n";
    std::istream& stream;
    std::istream::int_type fetch();
};

} // namespace PXML

#endif 
