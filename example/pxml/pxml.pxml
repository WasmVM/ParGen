<!DOCTYPE pxml>
<pxml namespace="ParsePxml">
    {% PxmlToken %}
    <tokens namespace="Tokens" headerFile="PxmlToken.hpp" sourceFile="PxmlToken.cpp">
        {% header file %}
        <header indent=0 position="top">
            #include \<string>
        </header>
        {% tokens %}
        <token name="Doctype" />
        <token name="Equal" />
        <token name="Close" />
        <token name="Inline" />
        <token name="Bool">
            <type>bool</type>
        </token>
        <token name="Number">
            <type>double</type>
        </token>
        <token name="Tag">
            <type>std::string</type>
        </token>
        <token name="Tail">
            <type>std::string</type>
        </token>
        <token name="String">
            <type>std::string</type>
        </token>
        <token name="Text">
            <type>std::string</type>
        </token>
        <token name="ID">
            <type>std::string</type>
        </token>
        <token name="Entity">
            <type>std::string</type>
        </token>
        <token name="Space">
            <type>std::string</type>
        </token>
    </tokens>
    {% Lexer %}
    <lexer class="PxmlLexer" newLine="\n" headerFile="PxmlLexer.hpp" sourceFile="PxmlLexer.cpp">
        {% DOCTYPE %}
        <rule pattern="<!DOCTYPE pxml>">
            return Token(Doctype(), _pos);
        </rule>
        {% Comment %}
        <rule id="Comment" pattern="\{%" push="comment" />
        <group name="comment">
            <use id="Comment" />
            <rule pattern="%\}" pop />
            <rule pattern="\\."/>
            <rule pattern="." />
        </group>
        {% tail %}
        <rule pattern="</\a\w*" more push="tail" />
        <group name="tail">
            <use id="Comment" />
            <rule pattern=">" pop >
                return Token(Tail(_text.substr(2, _text.size() - 3)), _pos);
            </rule>
            <rule pattern="\s+" />
        </group>
        {% tag %}
        <rule pattern="<\a\w*" push="tag">
            return Token(Tag(_text.substr(1)), _pos);
        </rule>
        <group name="tag">
            <use id="Comment" />
            <rule pattern="/\s*>" pop >
                return Token(Inline(), _pos);
            </rule>
            <rule pattern=">" pop >
                return Token(Close(), _pos);
            </rule>
            <rule pattern="\"" push="string" />
            <rule pattern="=">
                return Token(Equal(), _pos);
            </rule>
            <rule pattern="(true|false)">
                return Token(Bool(_text == "true"), _pos);
            </rule>
            <rule pattern="[\a_][\w_]*">
                return Token(ID(_text), _pos);
            </rule>
            <rule pattern="[+\-]?[0-9]+(\.[0-9]*)?([eE][+\-]?[0-9]+)?">
                return Token(Number(std::stod(_text)), _pos);
            </rule>
            <rule pattern="\s+" />
        </group>
        {% string %}
        <group name="string">
            <rule pattern="(.|\\.)" more />
            <rule pattern="\"" pop>
                return Token(String(_text.substr(0, _text.size() - 1)), _pos);
            </rule>
        </group>
        {% entity %}
        <rule pattern="&(amp|lt|gt|apos|quot);">
            return Token(Entity(_text), _pos);
        </rule>
        {% space %}
        <rule pattern="\s+">
            return Token(Space(_text), _pos);
        </rule>
        {% text %}
        <rule pattern="(.|\\<|\\.)">
            return Token(Text(_text), _pos);
        </rule>
    </lexer>
    <parser class="PxmlParser" headerFile="PxmlParser.hpp" sourceFile="PxmlParser.cpp" start="pxml" return="PXML::Pxml">
        {% header file %}
        <header indent=0 position="top">
            #include \<Pxml.hpp>
            #include \<exception.hpp>
        </header>
        {% helper function %}
        <source indent=0 position="top">
            static PXML::Position to_pos(ParsePxml::Position pos){
                return PXML::Position {.path = pos.path, .line = pos.line, .column = pos.column};
            }
        </source>
        {% targets %}
        <target name="pxml" type="PXML::Pxml">
            <grammar pattern="Doctype spaces element spaces">
                return _op2;
            </grammar>
        </target>
        <target name="content" type="PXML::Pxml::Child">
            <grammar pattern="element">
                return {to_pos(_pos[0]), _op0};
            </grammar>
            <grammar pattern="text">
                return {to_pos(_pos[0]), _op0};
            </grammar>
        </target>
        <target name="body" type="std::list<PXML::Pxml::Child>">
            <grammar pattern="body content">
                _op0.emplace_back(_op1);
                return _op0;
            </grammar>
            <grammar>
                return {};
            </grammar>
        </target>
        <target name="element" type="PXML::Pxml">
            <grammar pattern="Tag attributes Close body Tail">
                PXML::Position pos = to_pos(_pos[0]);
                if(_op0.value != _op4.value){
                    throw Exception::SyntaxError("tag not match", pos);
                }
                PXML::Pxml elem {.tag = _op0.value, .pos = pos};
                elem.swap(_op1);
                return elem;
            </grammar>
            <grammar pattern="Tag attributes Inline">
                PXML::Pxml elem {.tag = _op0.value, .pos = to_pos(_pos[0])};
                elem.swap(_op1);
                return elem;
            </grammar>
        </target>
        <target name="spaces" type="std::string">
            <grammar pattern="spaces Space">
                return _op0 + _op1.value;
            </grammar>
            <grammar>
                return "";
            </grammar>
        </target>
        <target name="text" type="std::string">
            <grammar pattern="text Text">
                return _op0 + _op1.value;
            </grammar>
            <grammar pattern="text spaces">
                return _op0 + _op1;
            </grammar>
            <grammar pattern="text Entity">
                return _op0 + _op1.value;
            </grammar>
        </target>
        <target name="attributes" type="std::unordered_map<std::string, PXML::Value>">
            <grammar pattern="attributes spaces attribute">
                _op0.emplace(_op2);
                return _op0;
            </grammar>
            <grammar>
                return {};
            </grammar>
        </target>
        <target name="attribute" type="std::pair<std::string, PXML::Value>">
            <grammar pattern="ID Equal value">
                return {_op0.value, _op2};
            </grammar>
            <grammar pattern="ID">
                return {_op0.value, {to_pos(_pos[0]), std::monostate()}};
            </grammar>
        </target>
        <target name="value" type="PXML::Value">
            <grammar pattern="Bool">
                return {to_pos(_pos[0]), _op0.value};
            </grammar>
            <grammar pattern="Number">
                return {to_pos(_pos[0]), _op0.value};
            </grammar>
            <grammar pattern="String">
                return {to_pos(_pos[0]), _op0.value};
            </grammar>
        </target>
    </parser>
</pxml>