<!DOCTYPE pxml>
<pxml namespace="PXML">
    {% PxmlToken %}
    <tokens namespace="Tokens" headerFile="PxmlToken.hpp" sourceFile="PxmlToken.cpp">
        {% header file %}
        <header indent=0 position="top">
            #include \<string>
        </header>
        {% tokens %}
        <token name="Doctype" />
        <token name="Equal" />
        <token name="Close" />
        <token name="Inline" />
        <token name="Bool">
            <type>bool</type>
        </token>
        <token name="Number">
            <type>double</type>
        </token>
        <token name="Tag">
            <type>std::string</type>
        </token>
        <token name="Tail">
            <type>std::string</type>
        </token>
        <token name="String">
            <type>std::string</type>
        </token>
        <token name="Text">
            <type>std::string</type>
        </token>
        <token name="ID">
            <type>std::string</type>
        </token>
        <token name="Entity">
            <type>std::string</type>
        </token>
        <token name="Space">
            <type>std::string</type>
        </token>
    </tokens>
    {% Lexer %}
    <lexer class="PxmlLexer" newLine="\n" headerFile="PxmlLexer.hpp" sourceFile="PxmlLexer.cpp">
        {% DOCTYPE %}
        <rule pattern="<!DOCTYPE pxml>">
            return Token(Doctype(), _pos);
        </rule>
        {% Comment %}
        <rule id="Comment" pattern="\{%" push="comment" />
        <group name="comment">
            <use id="Comment" />
            <rule pattern="%\}" pop />
            <rule pattern="." />
        </group>
        {% tail %}
        <rule pattern="</\a\w*" more push="tail" />
        <group name="tail">
            <use id="Comment" />
            <rule pattern=">" pop >
                return Token(Tail(_text.substr(2, _text.size() - 3)), _pos);
            </rule>
            <rule pattern="\s+" />
        </group>
        {% tag %}
        <rule pattern="<\a\w*" push="tag">
            return Token(Tag(_text.substr(1)), _pos);
        </rule>
        <group name="tag">
            <use id="Comment" />
            <rule pattern="/\s*>" pop >
                return Token(Inline(), _pos);
            </rule>
            <rule pattern=">" pop >
                return Token(Close(), _pos);
            </rule>
            <rule pattern="\"" push="string" />
            <rule pattern="=">
                return Token(Equal(), _pos);
            </rule>
            <rule pattern="(true|false)">
                return Token(Bool(_text == "true"), _pos);
            </rule>
            <rule pattern="[\a_][\w_]*">
                return Token(ID(_text), _pos);
            </rule>
            <rule pattern="[+\-]?[0-9]+(\.[0-9]*)?([eE][+\-]?[0-9]+)?">
                return Token(Number(std::stod(_text)), _pos);
            </rule>
            <rule pattern="\s+" />
        </group>
        {% string %}
        <group name="string">
            <rule pattern="(.|\\.)" more />
            <rule pattern="\"" pop>
                return Token(String(_text.substr(0, _text.size() - 1)), _pos);
            </rule>
        </group>
        {% entity %}
        <rule pattern="&(amp|lt|gt|apos|quot);">
            return Token(Entity(_text), _pos);
        </rule>
        {% space %}
        <rule pattern="\s+">
            return Token(Space(_text), _pos);
        </rule>
        {% text %}
        <rule pattern="(.|\\<|\\.)">
            return Token(Text(_text), _pos);
        </rule>
    </lexer>
</pxml>