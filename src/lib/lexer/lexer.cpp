// Copyright 2024 Luis Hsu
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     https://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include <ParGen.hpp>
#include <Util.hpp>
#include <exception.hpp>

#include "lexer.hpp"

#include <optional>
#include <cctype>
#include <fstream>
#include <memory>
#include <map>

using namespace Pargen;

std::ostream& operator<< (std::ostream& os, CharType& type){
    if(type.negate){
        os << "not ";
    }
    if(type.is_any()){
        return os << "any";
    }
    std::string characters(type.begin(), type.end());
    std::stable_sort(characters.begin(), characters.end());
    for(char ch : characters){
        if(std::isspace(ch)){
            switch(ch){
                case ' ':
                    os << "'" << ch << "'";
                break;
                case '\t':
                    os << "\\\\t";
                break;
                case '\r':
                    os << "\\\\r";
                break;
                case '\f':
                    os << "\\\\f";
                break;
                case '\v':
                    os << "\\\\v";
                break;
                case '\n':
                    os << "\\\\n";
                break;
            }
        }else if(ch == '\"'){
            os << "'\\\"'";
        }else if(ch == '\\'){
            os << "'\\\\'";
        }else{
            os << "'" << ch << "'";
        }
    }
    return os;
}

void Pargen::Lexer::generate_header(std::ostream& os){
    // prologue
    os << "/** generated by ParGen **/" << std::endl;
    {
        std::string guard = class_name;
        std::replace(guard.begin(), guard.end(), ':', '_');
        os << "#ifndef ParGen_" << guard << "_guard" << std::endl;
        os << "#define ParGen_" << guard << "_guard" << std::endl;
    }
    os << header_prologue << std::endl;
    os << "#include <iostream>" << std::endl;
    os << "#include <stack>" << std::endl;
    os << "#include <filesystem>" << std::endl;
    os << "#include <optional>" << std::endl;
    os << "#include <map>" << std::endl;
    os << "#include <initializer_list>" << std::endl;
    if(!parent.tokens.empty()){
        os << "#include " << parent.tokens.header_path.filename() << std::endl;
    }

    // pargen namespace
    os << "\nnamespace " << parent.name_space << " {\n" << std::endl;

    // Lexer class
    os << "struct " << class_name << " {" << std::endl;
    os << "    " << class_name << "(std::filesystem::path filepath, std::istream& stream);" << std::endl;
    os << "    " << parent.tokens.class_name << " get();" << std::endl;
    // Funcs
    for(std::string& func : functions){
        os << func << std::endl;
    }
    // Members
    for(std::string& member : members){
        os << member << std::endl;
    }
    os << "    Position pos;" << std::endl;
    os << "    std::string text = \"\";" << std::endl;
    os << "protected:" << std::endl;
    os << "    struct Chars {" << std::endl;
    os << "        Chars(std::initializer_list<char> init) : min(init.begin()[0]){" << std::endl;
    os << "            if(init.size() == 1){" << std::endl;
    os << "                max = '\\0';" << std::endl;
    os << "            }else{" << std::endl;
    os << "                max = init.begin()[1];" << std::endl;
    os << "            }" << std::endl;
    os << "        }" << std::endl;
    os << "        Chars(char init) : min(init), max(init){}" << std::endl;
    os << "        bool operator<(const Chars&);" << std::endl;
    os << "        char min, max;" << std::endl;
    os << "    };" << std::endl;
    os << "    using State = std::map<Chars, size_t>;" << std::endl;
    os << "    static std::vector<State> states;" << std::endl;
    os << "    std::deque<size_t> stack;" << std::endl;
    os << "    size_t cur = 0;" << std::endl;
    os << "    std::istream& stream;" << std::endl;
    os << "    std::istream::int_type fetch();" << std::endl;
    os << "};\n" << std::endl;

    // close namespace
    os << "} // namespace " << parent.name_space << std::endl;

    // epilogue
    os << header_epilogue << std::endl;
    os << "#endif " << std::endl;
}

void Pargen::Lexer::generate_source(std::ostream& os){

    // Create Autometa
    Autometa autometa(*this);
    // Dump autometa
    if(parent.options.debug){
        std::ofstream fout("lexer.dot");
        fout << "digraph {" << std::endl;
        fout << autometa << std::endl;
        fout << "}" << std::endl;
        fout.close();
    }

    // prologue
    os << "/** generated by ParGen **/" << std::endl;
    os << "#include " << header_path << std::endl;
    os << source_prologue << std::endl;

    // includes & namespace
    os << "\nnamespace " << parent.name_space << " {\n" << std::endl;

    // constructor
    os << class_name << "::" << class_name << "(std::filesystem::path path, std::istream& stream) :\n"
        "  stream(stream)\n{\n"
        "    pos.path = path;\n"
        "}\n" << std::endl;

    // fetch
    os << "std::istream::int_type " << class_name << "::fetch(){\n"
        "    std::istream::int_type res = stream.get();\n"
        "    if(res != std::istream::traits_type::eof()){\n"
        "        text += res;\n"
        "        if(text.ends_with(\"" << new_line << "\")){\n"
        "            pos.line += 1;\n"
        "            pos.column = 0;\n"
        "        }else{\n"
        "            pos.column += 1;\n"
        "        }\n"
        "    }\n"
        "    return res;\n"
        "}\n" << std::endl;

    // states TODO: use array instead
    os << "static const std::vector<std::pair<std::pair<size_t, size_t>, size_t[256]>> __states = {" << std::endl;
    os << "};\n" << std::endl;

    // functions
    for(std::string func : functions){
        // Write function
        std::string signature = append_func_name(func, class_name);
        if(signature.starts_with("template")){
            os << "// TODO : " << signature << "\n" << std::endl;
        }else{
            os << signature << "{" << std::endl;
            os << "    // TODO : implement function here" << std::endl;
            os << "}\n" << std::endl;
        }
    }

    // get
    os << parent.tokens.class_name << " " << class_name << "::get(){" << std::endl;
    os << "}\n" << std::endl;

    // close namespace
    os << "} // namespace " << parent.name_space << "\n" << std::endl;

    // epilogue
    os << source_epilogue << std::endl;
}